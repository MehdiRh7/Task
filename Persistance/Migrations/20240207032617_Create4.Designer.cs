// <auto-generated />
using System;
using Infrastructure.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240207032617_Create4")]
    partial class Create4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Task.Data.Entities.BirthCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NIN")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("birthCertificates");
                });

            modelBuilder.Entity("Task.Data.Entities.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NIN")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("degrees");
                });

            modelBuilder.Entity("Task.Data.Entities.Images.BirthCertificate_Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BirthCertificateID")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BirthCertificateID");

                    b.ToTable("birthCertificatesImages");
                });

            modelBuilder.Entity("Task.Data.Entities.Images.Degree_Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DegreeID")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DegreeID");

                    b.ToTable("degreeImages");
                });

            modelBuilder.Entity("Task.Data.Entities.Images.ProfessionalCert_Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionalCertID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalCertID");

                    b.ToTable("professionalCertImages");
                });

            modelBuilder.Entity("Task.Data.Entities.ProfessionalCert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NIN")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("professionalCert");
                });

            modelBuilder.Entity("Task.Data.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NIN")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Task.Data.Entities.BirthCertificate", b =>
                {
                    b.HasOne("Task.Data.Entities.Users", "Users")
                        .WithOne("birthCertificate")
                        .HasForeignKey("Task.Data.Entities.BirthCertificate", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Task.Data.Entities.Degree", b =>
                {
                    b.HasOne("Task.Data.Entities.Users", "Users")
                        .WithMany("degree")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Task.Data.Entities.Images.BirthCertificate_Images", b =>
                {
                    b.HasOne("Task.Data.Entities.BirthCertificate", "birthCertificate")
                        .WithMany("birthCertificate_Images")
                        .HasForeignKey("BirthCertificateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("birthCertificate");
                });

            modelBuilder.Entity("Task.Data.Entities.Images.Degree_Images", b =>
                {
                    b.HasOne("Task.Data.Entities.Degree", "degree")
                        .WithMany("degree_Images")
                        .HasForeignKey("DegreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("degree");
                });

            modelBuilder.Entity("Task.Data.Entities.Images.ProfessionalCert_Images", b =>
                {
                    b.HasOne("Task.Data.Entities.ProfessionalCert", "professionalCert")
                        .WithMany("professionalCert_Images")
                        .HasForeignKey("ProfessionalCertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("professionalCert");
                });

            modelBuilder.Entity("Task.Data.Entities.ProfessionalCert", b =>
                {
                    b.HasOne("Task.Data.Entities.Users", "Users")
                        .WithMany("professionalCert")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Task.Data.Entities.BirthCertificate", b =>
                {
                    b.Navigation("birthCertificate_Images");
                });

            modelBuilder.Entity("Task.Data.Entities.Degree", b =>
                {
                    b.Navigation("degree_Images");
                });

            modelBuilder.Entity("Task.Data.Entities.ProfessionalCert", b =>
                {
                    b.Navigation("professionalCert_Images");
                });

            modelBuilder.Entity("Task.Data.Entities.Users", b =>
                {
                    b.Navigation("birthCertificate")
                        .IsRequired();

                    b.Navigation("degree");

                    b.Navigation("professionalCert");
                });
#pragma warning restore 612, 618
        }
    }
}
